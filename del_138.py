# -*- coding: utf-8 -*-
"""del_138.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BjXfTb23MZxPXNeG8Hx8TRz-70z5HjVw
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split


X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=42)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

def create_dropout_model(dropout_rate=0.2):
    model = Sequential([

        Dense(64, input_shape=(X_train.shape[1],), activation='relu'),
        Dropout(dropout_rate),
        Dense(32, activation='relu'),
        Dropout(dropout_rate),
        Dense(1, activation='sigmoid')
    ])
    return model

dropout_model = create_dropout_model(dropout_rate=0.2)
dropout_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

dropout_history = dropout_model.fit(X_train, y_train, epochs=50, batch_size=32,
                                    validation_data=(X_test, y_test), verbose=0)
def create_gradient_clip_model(clip_norm=1.0):
    model = Sequential([Dense(64, input_shape=(X_train.shape[1],), activation='relu'),
                   Dense(32, activation='relu'),
                   Dense(1, activation='sigmoid')
    ])
    optimizer = Adam(clipnorm=clip_norm)
    model.compile(optimizer=optimizer, loss='binary_crossentropy',
    metrics=['accuracy'])
    return model
gradient_clip_model = create_gradient_clip_model(clip_norm=1.0)
gradient_clip_history = gradient_clip_model.fit(X_train, y_train, epochs=50, batch_size=32,validation_data=(X_test, y_test), verbose=0)

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
plt.plot(dropout_history.history['accuracy'],label='Dropout Training Accuracy',linestyle='--')
plt.plot(dropout_history.history['val_accuracy'],label='Dropout Validation Accuracy')
plt.plot(gradient_clip_history.history['accuracy'],label='Gradient Clip Training Accuracy',linestyle='--')
plt.plot(gradient_clip_history.history['val_accuracy'],label='Gradient Clip Validation Accuracy')
plt.title('Training and validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()